{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    
    "Template": {
        "prefix": "temp",
        "body": [
            "<#",
            ".SYNOPSIS",
            "Script synopsis",
            "",
            ".SYNTAX",
            "Script syntax",
            "",
            ".DESCRIPTION",
            "Script description",
            "",
            ".PARAMETER <Parameter_Name>",
            "Parameter input descriptions and repeat this as needed for each parameter",
            "",
            ".INPUTS",
            "Input description if used",
            "",
            ".OUTPUTS",
            "Output description if used",
            "",
            ".NOTES",
            "FileName: ",
            "Author: Michael Schultz",
            "Contact: ",
            "Created: $CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE",
            "Modified: ",
            "Version: ",
            "",
            ".EXAMPLE",
            "Example description and example",
            "",
            "#>",
            "",
            "#-----Parameters-----",
            "",
            "Param (",
            "",
            "",
            ")",

            "#-----Initializations and Module Imports-----",
            "",
            "#-----Variables-----",
            "",
            "#-----Functions-----",
            "",
            "#-----Logging-----",
            "",            
            "#-----Execution-----"
        ],
        "description": "PowerShell Template"
    },

    "Template with Logging": {
        "prefix": "temp_log",
        "body": [
            "<#",
            ".SYNOPSIS",
            "Script synopsis",
            "",
            ".SYNTAX",
            "Script syntax",
            "",
            ".DESCRIPTION",
            "Script description",
            "",
            ".PARAMETER <Parameter_Name>",
            "Parameter input descriptions and repeat this as needed for each parameter",
            "",
            ".INPUTS",
            "Input description if used",
            "",
            ".OUTPUTS",
            "Output description if used",
            "",
            ".NOTES",
            "FileName: ",
            "Author: Michael Schultz",
            "Contact: ",
            "Created: $CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE",
            "Modified: ",
            "Version: ",
            "",
            ".EXAMPLE",
            "Example description and example",
            "",
            "#>",
            "",
            "#-----Parameters-----",
            "",
            "Param (",
            "",
            "",
            ")",
            "",
            "#-----Initializations and Module Imports-----",
            "",
            "#-----Variables-----",
            "",
            "#set Event Log Name, Event Log Source and Log file unique name",
            "$$evntlog = ''",
            "$$source = ''",
            "",
            "#set Log File path and Log File name",
            "$$logpath = ''",
            "$$logfile = $$logpath + $$source + '.log'",
            "",
            "#-----Functions-----",
            "",
            "#-----Logging-----",
            "",
            "#set Event Log logging as the source needs to exist prior to writing to the log this will check for it and create if not there",
            "if ([System.Diagnostics.EventLog]::SourceExists($$source) -eq $$False)", 
            "{",
            "   New-EventLog -LogName $$evntlog -Source $$source",
            "}",
            "",
            "#Check for logfile, remove log file if bigger than 5MB to prevent bloat, and create new logfile",
            "If (Test-Path $$Logfile )",
            "{",
            "   if ((Get-Item $$Logfile ).Length -gt 5MB) ",
            "   {",
            "       remove-item $$Logfile ",
            "   }",
            "}",
            "else",
            "{",
            "   new-item -Path $$Logfile –itemtype file",
            "}",
            "",
            "#-----Execution-----"
        ],
        "description": "PowerShell Template with Logging"
    },

    "EventLog ": {
        "scope": "powershell",
        "prefix": "event",
        "body": [
            "Write-EventLog –LogName $$evntlog –Source $$source –EntryType Information –EventID <eventID> –Message ''"
        ],
        "description": "Write to Event Log"
    },

    "EventLog_ErrorCatch": {
        "scope": "powershell",
        "prefix": "event",
        "body": [
            " -ErrorVariable ProcessError",
            "if ($$ProcessError -ne $$null)",
            "{",
            "   Write-EventLog –LogName $$evntlog –Source $$source –EntryType Error –EventID <eventID> –Message '$$ProcessError'",
            "   $$ProcessError = $null",
            "   $$err = 'true'",
            "}",
        ],
        "description": "Error Process and write error to Event Log"
    },

    "LogFile": {
        "scope": "powershell",
        "prefix": "log",
        "body": [
            "$$mydate = Get-Date",
            "Add-content $$Logfile -value '$$mydate; '"
        ],
        "description": "Write to log file"
    },
        
    "LogFile_ErrorCatch": {
        "scope": "powershell",
        "prefix": "log",
        "body": [
            " -ErrorVariable ProcessError",
            "if ($$ProcessError -ne $$null)",
            "{",
            "   $$mydate = Get-Date",
            "   Add-content $$Logfile -value '$$mydate; $$ProcessError'",
            "   $$ProcessError = $null",
            "   $$err = 'true'"      
            "}",
        ],
        "description": "Error Process and write error to log file"
    },        
}



